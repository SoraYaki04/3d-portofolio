/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useMemo } from 'react'
import { useGLTF, useAnimations, useFBX } from '@react-three/drei'
import { SkeletonUtils } from 'three/examples/jsm/Addons.js'
import { useGraph } from '@react-three/fiber'
import * as THREE from 'three'

const Developer = ({ animationName = 'idle', ...props }) => {
  const group = useRef();
  const previousAction = useRef(null) ;

  // --- Load GLB model ---
  const { scene } = useGLTF('/models/human/developer.glb')
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  // --- Load animations dari FBX ---
  const { animations: idleAnimation } = useFBX('/models/animations/idle.fbx')
  const { animations: thinkingAnimation } = useFBX('/models/animations/thinking.fbx')
  const { animations: thankfulAnimation } = useFBX('/models/animations/thankful.fbx')
  const { animations: blowKissAnimation } = useFBX('/models/animations/blowkiss.fbx')

  // Rename biar gampang dipanggil
  idleAnimation[0].name = 'idle';
  thinkingAnimation[0].name = 'thinking';
  thankfulAnimation[0].name = 'thankful';
  blowKissAnimation[0].name = 'blowkiss';

  // Binding animasi ke group
  const { actions } = useAnimations(
    [idleAnimation[0], thinkingAnimation[0], thankfulAnimation[0], blowKissAnimation[0]],
    group
  )

  // Effect ganti animasi sesuai props

  useEffect(() => {
    
  if (!actions) return
    if (actions && actions[animationName]) {
      actions[animationName].reset().play()
      return () => actions[animationName]
    }
  }, [actions, animationName])


  return (
    <group ref={group} {...props} dispose={null}>
      <group name="hero_zen_blue_hair_0003">
        <skinnedMesh
          name="hero_zen_blue_hair_0003001"
          geometry={nodes.hero_zen_blue_hair_0003001.geometry}
          material={materials['hero_zen_blue_head_0001.001']}
          skeleton={nodes.hero_zen_blue_hair_0003001.skeleton}
          morphTargetDictionary={nodes.hero_zen_blue_hair_0003001.morphTargetDictionary}
          morphTargetInfluences={nodes.hero_zen_blue_hair_0003001.morphTargetInfluences}
        />
        <skinnedMesh
          name="hero_zen_blue_hair_0003001_1"
          geometry={nodes.hero_zen_blue_hair_0003001_1.geometry}
          material={materials['hero_zen_blue_head_0001.001']}
          skeleton={nodes.hero_zen_blue_hair_0003001_1.skeleton}
          morphTargetDictionary={nodes.hero_zen_blue_hair_0003001_1.morphTargetDictionary}
          morphTargetInfluences={nodes.hero_zen_blue_hair_0003001_1.morphTargetInfluences}
        />
        <skinnedMesh
          name="hero_zen_blue_hair_0003001_2"
          geometry={nodes.hero_zen_blue_hair_0003001_2.geometry}
          material={materials.hero_zen_blue_body_0001}
          skeleton={nodes.hero_zen_blue_hair_0003001_2.skeleton}
          morphTargetDictionary={nodes.hero_zen_blue_hair_0003001_2.morphTargetDictionary}
          morphTargetInfluences={nodes.hero_zen_blue_hair_0003001_2.morphTargetInfluences}
        />
      </group>
      <primitive object={nodes.mixamorigHips} />
    </group>
  )
}

useGLTF.preload('/models/human/developer.glb')

export default Developer
